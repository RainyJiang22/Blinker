import com.android.build.api.instrumentation.*
import com.blinker.video.plugin.runtime.NavData
import com.blinker.video.plugin.runtime.NavDestination
import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import org.objectweb.asm.*
import java.io.File

open abstract class NavClassVisitorFactory : AsmClassVisitorFactory<InstrumentationParameters.None> {

    companion object {
        const val NAV_RUNTIME_DESTINATION = "Lcom/blinker/video/plugin/runtime/NavDestination;"
        private const val KEY_ROUTE = "route"
        private const val KEY_TYPE = "type"

        private const val NAV_RUNTIME_PKG_NAME = "com.blinker.video.plugin.runtime"
        private const val NAV_RUNTIME_REGISTRY_CLASS_NAME = "NavRegistry"
        private const val NAV_RUNTIME_NAV_DATA_CLASS_NAME = "NavData"
        private const val NAV_RUNTIME_NAV_LIST = "navList"

        private val navDatas = mutableListOf<NavData>()
    }

    override fun createClassVisitor(
        classContext: ClassContext,
        nextClassVisitor: ClassVisitor
    ): ClassVisitor {
        return object : ClassVisitor(Opcodes.ASM9, nextClassVisitor) {
            override fun visitAnnotation(descriptor: String?, visible: Boolean): AnnotationVisitor? {
                if (descriptor == NAV_RUNTIME_DESTINATION) {
                    return object : AnnotationVisitor(Opcodes.ASM9) {
                        var route = ""
                        var type = NavDestination.NavType.None

                        override fun visit(name: String?, value: Any?) {
                            if (name == KEY_ROUTE) {
                                route = value as String
                            }
                        }

                        override fun visitEnum(name: String?, descriptor: String?, value: String?) {
                            if (name == KEY_TYPE) {
                                type = NavDestination.NavType.valueOf(value!!)
                            }
                        }

                        override fun visitEnd() {
                            val navData = NavData(
                                route,
                                classContext.currentClassData.className.replace("/", "."),
                                type
                            )
                            synchronized(navDatas) { navDatas.add(navData) }
                        }
                    }
                }
                return super.visitAnnotation(descriptor, visible)
            }
        }
    }

    override fun isInstrumentable(classData: ClassData): Boolean {
        return true // 根据需求过滤类
    }

    fun generateNavRegistry(project: File) {
        // 生成代码逻辑
        val navDataClass = ClassName(NAV_RUNTIME_PKG_NAME, NAV_RUNTIME_NAV_DATA_CLASS_NAME)
        val list = ClassName("kotlin.collections", "List").parameterizedBy(navDataClass)
        val arrayList = ClassName("kotlin.collections", "ArrayList").parameterizedBy(navDataClass)

        val property = PropertySpec.builder(NAV_RUNTIME_NAV_LIST, arrayList, KModifier.PRIVATE)
            .initializer("ArrayList()")
            .build()

        val function = FunSpec.builder("get")
            .returns(list)
            .addCode(
                """
                val list = ArrayList<NavData>()
                list.addAll(navList)
                return list
                """.trimIndent()
            )
            .build()

        val typeSpec = TypeSpec.objectBuilder(NAV_RUNTIME_REGISTRY_CLASS_NAME)
            .addProperty(property)
            .addInitializerBlock(
                CodeBlock.builder()
                    .add(navDatas.joinToString("\n") {
                        """navList.add(NavData("${it.route}", "${it.className}", ${it.type}))"""
                    })
                    .build()
            )
            .addFunction(function)
            .build()

        val fileSpec = FileSpec.builder(NAV_RUNTIME_PKG_NAME, NAV_RUNTIME_REGISTRY_CLASS_NAME)
            .addComment("Generated by NavTransform, do not modify!")
            .addType(typeSpec)
            .build()

        // 写入文件
        val outputDir = File(project, "build/generated/source/navRegistry")
        outputDir.mkdirs()
        fileSpec.writeTo(outputDir.toPath())
    }
}
